/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 20.06.6 ] */
/* [wxMaxima: section start ]
Utility functions
   [wxMaxima: section end   ] */


/* [wxMaxima: subsect start ]
Discretizaton. Replace function of time by discrete time series. F(t) -> F[k], t -> h*k
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
discretize(_e):=if atom(_e) then subst(k*h,t,_e) else if symbolp(op(_e)) and args(_e)=[t] then op(_e)[k] else map(discretize,_e);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Integration. Solves the initial value problem of a 1st order differential equation of the form given in F2.
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
F2:diff(y(t),t) = f(y(t),t);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Backward euler integration. 
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
backward_euler(_f):=block(local(L,R),
    L:discretize(integrate(lhs(_f),t)),
    R:discretize(rhs(_f)),
    solve(L = subst(k-1,k,L)+h*R, L)[1]
    );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
backward_euler(F2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Trapezoidal integration.
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
bilinear(f):=block(local(L,R),
    L:discretize(integrate(lhs(f),t)),
    R:discretize(rhs(f)),
    solve(L = subst(k-1,k,L)+h/2*(R+subst(k-1,k,R)), L)[1]
    );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
bilinear(F2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Inverse laplace. Replaces F(s)*s^n -> diff(F(t),t,n)
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Convert a rational transfer function into an ordinary differential equation
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ils(_e):=block(local(pows,ilf,ild,ilm,ilfs,ilex),
    pows(_e):=if atom(_e) then (if _e=s then 1) else if op(_e)="^" and first(_e)=s then second(_e) else 0,
    ilf(_e):= if atom(_e) then _e else if symbolp(op(_e)) and part(_e,1)=s then subst(t,s,_e) else _e,
    ild(_e):=_e[1] * if atom(_e[2]) then _e[2] else if op(_e[2])#"*" then ilf(_e[2]) else if length(_e[2])#2 then _e[2] else diff(ilf(part(_e[2],2)),t,pows(part(_e[2],1))),
    ilm(_e):=if op(_e)#"*" then ilf(_e) else ild(partition(_e,s)),
    ilfs(_e):=if atom(_e) then _e else map(ilfs,ilm(_e)),
    ilex(_e):=ilfs(intosum(expand(denom(lhs(_e))*denom(rhs(_e))*_e))),
    ratsimp(ilex(ratdisrep(rat(_e))),t)
    );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Convert a transfer funtion into an ODE and solve for the 1. derivative of the output variable.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ilp(_e) := append(solve(ils(_e),diff(subst(t,s,(lhs(_e))),t)), solve(ils(_e),subst(t,s,lhs(_e))))[1];
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 20.06.6"$
